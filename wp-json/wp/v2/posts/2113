{"id":2113,"date":"2021-11-28T12:11:59","date_gmt":"2021-11-28T12:11:59","guid":{"rendered":"https:\/\/jacekjeznach.com\/?p=2113"},"modified":"2022-02-03T09:49:27","modified_gmt":"2022-02-03T09:49:27","slug":"javascript-interview-questions-and-answers-2021","status":"publish","type":"post","link":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/","title":{"rendered":"Javascript Interview Questions &#038; Answers (Part 1)"},"content":{"rendered":"<h2>What are the possible ways to create objects in JavaScript?<\/h2>\n<p>There are many ways to create objects in javascript as below,<\/p>\n<h3>Object constructor:<\/h3>\n<p>The simplest way to create an empty object is using Object constructor. Currently this approach is not recommended.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">var object = new Object();<\/pre>\n<h3>Object&#8217;s create method:<\/h3>\n<p>The create method of Object creates a new object by passing the prototype object as a parameter<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">var object = Object.create(null);<\/pre>\n<h3>Object literal syntax:<\/h3>\n<p>The object literal syntax is equivalent to create method when it passes null as parameter<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">var object = {};<\/pre>\n<h3>Function constructor:<\/h3>\n<p>Create any function and apply the new operator to create object instances,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function Person(name){\r\nvar object = {};\r\nobject.name=name;\r\nobject.age=21;\r\nreturn object;\r\n}\r\nvar object = new Person(&quot;Sudheer&quot;);<\/pre>\n<h3>Function constructor with prototype:<\/h3>\n<p>This is similar to function constructor but it uses prototype for their properties and methods,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function Person(){}\r\nPerson.prototype.name = &quot;Sudheer&quot;;\r\nvar object = new Person();<\/pre>\n<p>This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function func {};\r\n\r\nnew func(x, y, z);\r\n\r\n\/*(OR)*\/\r\n\r\n\/\/ Create a new instance using function prototype.\r\nvar newInstance = Object.create(func.prototype)\r\n\r\n\/\/ Call the function\r\nvar result = func.call(newInstance, x, y, z),\r\n\r\n\/\/ If the result is a non-null object then use it otherwise just use the new instance.\r\nconsole.log(result &amp;amp;amp;amp;&amp;amp;amp;amp; typeof result === 'object' ? result : newInstance);<\/pre>\n<h3>ES6 Class syntax<\/h3>\n<p>ES6 introduces class feature to create the objects<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">class Person {\r\nconstructor(name) {\r\nthis.name = name;\r\n}\r\n}\r\n\r\nvar object = new Person(&quot;Sudheer&quot;);<\/pre>\n<h3>Singleton pattern<\/h3>\n<p>A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don&#8217;t accidentally create multiple instances.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">var object = new function(){\r\nthis.name = &quot;Sudheer&quot;;\r\n}<\/pre>\n<p><strong><ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"7226953054\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script><\/strong><\/p>\n<h2>What is prototype chain?<\/h2>\n<p><strong>Prototype chaining<\/strong> is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language. The prototype on object instance is available through Object.getPrototypeOf(object) or <strong>proto<\/strong> property whereas prototype on constructors function is available through object.prototype.<\/p>\n<h2>What is the difference between Call, Apply and Bind?<\/h2>\n<p>The difference between Call, Apply and Bind can be explained with below examples:<\/p>\n<p><strong>Call<\/strong>: The call() method invokes a function with a given this value and arguments provided one by one<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\r\nvar employee1 = {firstName: 'John', lastName: 'Rodson'};\r\nvar employee2 = {firstName: 'Jimmy', lastName: 'Baily'};\r\n\r\nfunction invite(greeting1, greeting2) {\r\nconsole.log(greeting1 + ' ' + this.firstName + ' ' + this.lastName+ ', '+ greeting2);\r\n}\r\n\r\ninvite.call(employee1, 'Hello', 'How are you?');\r\ninvite.call(employee2, 'Hello', 'How are you?');\r\n\r\n<\/pre>\n<p><strong>Apply<\/strong>:\u00a0Invokes the function and allows you to pass in arguments as an array<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar employee1 = {firstName: 'John', lastName: 'Rodson'};\r\nvar employee2 = {firstName: 'Jimmy', lastName: 'Baily'};\r\n\r\nfunction invite(greeting1, greeting2) {\r\n    console.log(greeting1 + ' ' + this.firstName + ' ' + this.lastName+ ', '+ greeting2);\r\n}\r\n\r\ninvite.apply(employee1, ['Hello', 'How are you?']); \/\/ Hello John Rodson, How are you?\r\ninvite.apply(employee2, ['Hello', 'How are you?']); \/\/ Hello Jimmy Baily, How are you?\r\n<\/pre>\n<p><strong>bind:\u00a0<\/strong>returns a new function, allowing you to pass in an array and any number of arguments<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar employee1 = {firstName: 'John', lastName: 'Rodson'};\r\nvar employee2 = {firstName: 'Jimmy', lastName: 'Baily'};\r\n\r\nfunction invite(greeting1, greeting2) {\r\n    console.log(greeting1 + ' ' + this.firstName + ' ' + this.lastName+ ', '+ greeting2);\r\n}\r\n\r\nvar inviteEmployee1 = invite.bind(employee1);\r\nvar inviteEmployee2 = invite.bind(employee2);\r\ninviteEmployee1('Hello', 'How are you?'); \/\/ Hello John Rodson, How are you?\r\ninviteEmployee2('Hello', 'How are you?'); \/\/ Hello Jimmy Baily, How are you?\r\n<\/pre>\n<p>Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether it\u2019s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for comma (separated list) and Apply is for Array. Whereas Bind creates a new function that will have\u00a0this\u00a0set to the first parameter passed to bind().<\/p>\n<h2>What is JSON and its common operations?<\/h2>\n<p><strong>JSON\u00a0<\/strong>is a text-based data format following JavaScript object syntax, which was popularized by Douglas Crockford. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application\/json Parsing: **Converting a string to a native object<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">JSON.parse(text)<\/pre>\n<p>Stringification: **converting a native object to a string so it can be transmitted across the network<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">JSON.stringify(object)<\/pre>\n<p><strong><ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"9851625702\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\r\n\u00a0<\/strong><\/p>\n<h2>What is the purpose of array slice method?<\/h2>\n<p>The\u00a0<strong>slice()<\/strong>\u00a0method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end. Some of the examples of this method are,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nlet arrayIntegers = [1, 2, 3, 4, 5];\r\nlet arrayIntegers1 = arrayIntegers.slice(0,2); \/\/ returns [1,2]\r\nlet arrayIntegers2 = arrayIntegers.slice(2,3); \/\/ returns [3]\r\nlet arrayIntegers3 = arrayIntegers.slice(4); \/\/returns [5]\r\n<\/pre>\n<p><strong>Note:<\/strong>\u00a0Slice method won&#8217;t mutate the original array but it returns the subset as new array.<\/p>\n<h2>What is the purpose of isFinite function?<\/h2>\n<p>The isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nisFinite(Infinity);  \/\/ false\r\nisFinite(NaN);       \/\/ false\r\nisFinite(-Infinity); \/\/ false\r\n\r\nisFinite(100);         \/\/ true\r\n<\/pre>\n<h2>What is an event flow?<\/h2>\n<p>Event flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event each of its parent elements first, starting at the top with the global window object. There are two ways of event flow<\/p>\n<ul>\n<li>Top to Bottom(Event Capturing)<\/li>\n<li>Bottom to Top (Event Bubbling)<\/li>\n<\/ul>\n<h2>What is event bubbling?<\/h2>\n<p>Event bubbling is a type of event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.<\/p>\n<h2>What is event capturing?<\/h2>\n<p>Event bubbling is a type of event propagation where the event is first captured by the outermost element and , and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the inner DOM element.<\/p>\n<h2>How do you submit a form using JavaScript?<\/h2>\n<p>You can submit a form using JavaScript use document.form[0].submit(). All the form input&#8217;s information is submitted using onsubmit event handler<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nfunction submit() {\r\n    document.form[0].submit();\r\n}\r\n<\/pre>\n<h2>How do you find operating system details?<\/h2>\n<p>The <strong>window.navigator<\/strong> object contains information about the visitor&#8217;s browser os details. Some of the OS properties are avaialble under platform property,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">console.log(navigator.platform);<\/pre>\n<h2>What is the difference between document load and DOMContentLoaded events?<\/h2>\n<p>The\u00a0<strong>DOMContentLoaded\u00a0<\/strong>event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images)<\/p>\n<h2>What is the difference between native, host and user objects?<\/h2>\n<p>Native objects\u00a0are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec.\u00a0Host objects\u00a0are objects provided by the browser or runtime environment (Node). For example, window, XmlHttpRequest, DOM nodes etc considered as host objects.\u00a0User objects\u00a0are objects defined in the javascript code. For example, User object created for profile information.<\/p>\n<h2>What are the tools or techniques used for debugging JavaScript code?<\/h2>\n<p>You can use below tools or techniques for debugging javascript<\/p>\n<ul>\n<li>Chrome Devtools<\/li>\n<li>debugger statement<\/li>\n<li>Good old console.log statement<\/li>\n<\/ul>\n<p><strong><ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"7226953054\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script><\/strong><\/p>\n<h2>What are the pros and cons of promises over callbacks?<\/h2>\n<p>Below are the list of pros and cons of promises over callbacks<\/p>\n<p><strong>Pros<\/strong>:<\/p>\n<ul>\n<li>It avoids callback hell which is unreadable<\/li>\n<li>Easy to write sequential asynchronous code with .then()<\/li>\n<li>Easy to write parallel asynchronous code with Promise.all()<\/li>\n<li>Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors\/exceptions)<\/li>\n<\/ul>\n<p><strong>Cons<\/strong>:<\/p>\n<ul>\n<li>It makes little complex code<\/li>\n<li>You need to load a polyfill if ES6 is not supported<\/li>\n<\/ul>\n<h2>What is the purpose of array splice method?<\/h2>\n<p>The\u00a0<strong>splice()<\/strong>\u00a0method is used either adds\/removes items to\/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the option second argument indicates the number of elements to be deleted. Each additional argument is added to the array. Some of the examples of this method are,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nlet arrayIntegersOriginal1 = [1, 2, 3, 4, 5];\r\nlet arrayIntegersOriginal2 = [1, 2, 3, 4, 5];\r\nlet arrayIntegersOriginal3 = [1, 2, 3, 4, 5];\r\n\r\nlet arrayIntegers1 = arrayIntegersOriginal1.splice(0,2); \/\/ returns [1, 2]; original array: [3, 4, 5]\r\nlet arrayIntegers2 = arrayIntegersOriginal2.splice(3); \/\/ returns [4, 5]; original array: [1, 2, 3]\r\nlet arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, &amp;amp;quot;a&amp;amp;quot;, &amp;amp;quot;b&amp;amp;quot;, &amp;amp;quot;c&amp;amp;quot;); \/\/returns [4]; original array: [1, 2, 3, &amp;amp;quot;a&amp;amp;quot;, &amp;amp;quot;b&amp;amp;quot;, &amp;amp;quot;c&amp;amp;quot;, 5]\r\n<\/pre>\n<p><strong>Note:<\/strong>\u00a0Splice method modifies the original array and returns the deleted array.<\/p>\n<h2>How do you compare Object and Map?<\/h2>\n<p>Objects\u00a0are similar to\u00a0Maps\u00a0in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.<\/p>\n<ul>\n<li>The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.<\/li>\n<li>The keys in Map are ordered while keys added to object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.<\/li>\n<li>You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.<\/li>\n<li>A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.<\/li>\n<li>An Object has a prototype, so there are default keys in the map that could collide with your keys if you&#8217;re not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.<\/li>\n<li>A Map may perform better in scenarios involving frequent addition and removal of key pairs.<\/li>\n<\/ul>\n<h2>What are lambda or arrow functions?<\/h2>\n<p>An arrow function is a shorter syntax for a function expression and does not have its own\u00a0<strong>this, arguments, super, or new.target<\/strong>. These function are best suited for non-method functions, and they cannot be used as constructors.<\/p>\n<p><strong><ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"7226953054\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script><\/strong><\/p>\n<h2>What is a first class function?<\/h2>\n<p>In Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable. For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">const handler = () =&amp;amp;gt; console.log ('This is a click handler function');\r\ndocument.addEventListener ('click', handler);<\/pre>\n<h2>What is a first order function?<\/h2>\n<p>First-order function is a function that doesn\u2019t accept other function as an argument and doesn\u2019t return a function as its return value.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">const firstOrder = () =&amp;amp;gt; console.log ('Iam a first order functionn!');<\/pre>\n<h2>What is a higher order function?<\/h2>\n<p>Higher-order function is a function that accepts other function as an argument or returns a function as a return value.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">const firstOrderFunc = () =&amp;gt; console.log ('Hello I'am a First order function');\r\nconst higherOrder = ReturnFirstOrderFunc =&amp;gt; ReturnFirstOrderFunc ();\r\nhigherOrder (firstOrderFunc);<\/pre>\n<h2>What is a unary function?<\/h2>\n<p>Unary function (i.e. monadic) is a function that accepts exactly one argument. Let us take an example of unary function. It stands for single argument accepted by a function.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">const unaryFunction = a =&amp;gt; console.log (a + 10); \/\/Add 10 to the given argument and display the value<\/pre>\n<h2>What is currying function?<\/h2>\n<p>Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a n-ary function turns it into a unary function. Let&#8217;s take an example of n-ary function and how it turns into a currying function<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">const multiArgFunction = (a, b, c) =&amp;gt; a + b + c;\r\nconst curryUnaryFunction = a =&amp;gt; b =&amp;gt; c =&amp;gt; a + b + c;\r\ncurryUnaryFunction (1); \/\/ returns a function: b =&amp;gt; c =&amp;gt;  1 + b + c\r\ncurryUnaryFunction (1) (2); \/\/ returns a function: c =&amp;gt; 3 + c\r\ncurryUnaryFunction (1) (2) (3); \/\/ returns the number 6\r\nCurried functions are great to improve code re-usability and functional composition.\r\n<\/pre>\n<p><strong><ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"9851625702\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\r\n<\/strong><\/p>\n<h2>What is a callback hell?<\/h2>\n<p>Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nasync1(function(){\r\n    async2(function(){\r\n        async3(function(){\r\n            async4(function(){\r\n                ....\r\n            });\r\n        });\r\n    });\r\n});\r\n<\/pre>\n<h2>What are server-sent events?<\/h2>\n<p>Server-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel &#8211; events flow from server to client only. This is been used in Facebook\/Twitter updates, stock price updates, news feeds etc.<\/p>\n<h2>How do you receive server-sent event notifications?<\/h2>\n<p>The EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nif(typeof(EventSource) !== &quot;undefined&quot;) {\r\n  var source = new EventSource(&quot;sse_generator.js&quot;);\r\n  source.onmessage = function(event) {\r\n    document.getElementById(&quot;output&quot;).innerHTML += event.data + &quot;&amp;lt;br&amp;gt;&quot;;\r\n  };\r\n}\r\n<\/pre>\n<h2>How do you check browser support for server-sent events?<\/h2>\n<p>You can perform browser support for server-sent events before using it as below,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nif(typeof(EventSource) !== &quot;undefined&quot;) {\r\n  \/\/ Server-sent events supported. Let's have some code here!\r\n} else {\r\n  \/\/ No server-sent events supported\r\n}\r\n<\/pre>\n","protected":false},"excerpt":{"rendered":"<p>What are the possible ways to create objects in JavaScript? There are many ways to create objects in javascript as below, Object constructor: The simplest way to create an empty object is using Object constructor. Currently this approach is not recommended. Object&#8217;s create method: The create method of Object creates a new object by passing [&hellip;]<\/p>\n","protected":false},"author":4,"featured_media":2061,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[61],"tags":[62,55],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Javascript Interview Questions &amp; Answers (Part 1) | JavaScript | JJ<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Javascript Interview Questions &amp; Answers (Part 1) | JavaScript | JJ\" \/>\n<meta property=\"og:description\" content=\"What are the possible ways to create objects in JavaScript? There are many ways to create objects in javascript as below, Object constructor: The simplest way to create an empty object is using Object constructor. Currently this approach is not recommended. Object&#8217;s create method: The create method of Object creates a new object by passing [&hellip;]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/\" \/>\n<meta property=\"og:site_name\" content=\"JJ\" \/>\n<meta property=\"article:published_time\" content=\"2021-11-28T12:11:59+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-03T09:49:27+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1600\" \/>\n\t<meta property=\"og:image:height\" content=\"900\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:creator\" content=\"@JeznachJacek\" \/>\n<meta name=\"twitter:site\" content=\"@JeznachJacek\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Jacek Jeznach\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/jacekjeznach.com\/#website\",\"url\":\"https:\/\/jacekjeznach.com\/\",\"name\":\"JJ\",\"description\":\"Hire Professional  WordPress Expert - providing multiple services including website maintenance and interactive solutions\",\"publisher\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/jacekjeznach.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"contentUrl\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"width\":1600,\"height\":900},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#webpage\",\"url\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/\",\"name\":\"Javascript Interview Questions & Answers (Part 1) | JavaScript | JJ\",\"isPartOf\":{\"@id\":\"https:\/\/jacekjeznach.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#primaryimage\"},\"datePublished\":\"2021-11-28T12:11:59+00:00\",\"dateModified\":\"2022-02-03T09:49:27+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/jacekjeznach.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Javascript Interview Questions &#038; Answers (Part 1)\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#webpage\"},\"author\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"headline\":\"Javascript Interview Questions &#038; Answers (Part 1)\",\"datePublished\":\"2021-11-28T12:11:59+00:00\",\"dateModified\":\"2022-02-03T09:49:27+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#webpage\"},\"wordCount\":2424,\"publisher\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"image\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"keywords\":[\"javascript\",\"personal\"],\"articleSection\":[\"JavaScript\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\",\"name\":\"Jacek Jeznach\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/jacekjeznach.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g\",\"caption\":\"Jacek Jeznach\"},\"logo\":{\"@id\":\"https:\/\/jacekjeznach.com\/#personlogo\"},\"url\":\"https:\/\/jacekjeznach.com\/author\/jeznacki1234\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Javascript Interview Questions & Answers (Part 1) | JavaScript | JJ","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/","og_locale":"en_US","og_type":"article","og_title":"Javascript Interview Questions & Answers (Part 1) | JavaScript | JJ","og_description":"What are the possible ways to create objects in JavaScript? There are many ways to create objects in javascript as below, Object constructor: The simplest way to create an empty object is using Object constructor. Currently this approach is not recommended. Object&#8217;s create method: The create method of Object creates a new object by passing [&hellip;]","og_url":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/","og_site_name":"JJ","article_published_time":"2021-11-28T12:11:59+00:00","article_modified_time":"2022-02-03T09:49:27+00:00","og_image":[{"width":1600,"height":900,"url":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","type":"image\/jpeg"}],"twitter_card":"summary","twitter_creator":"@JeznachJacek","twitter_site":"@JeznachJacek","twitter_misc":{"Written by":"Jacek Jeznach","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/jacekjeznach.com\/#website","url":"https:\/\/jacekjeznach.com\/","name":"JJ","description":"Hire Professional  WordPress Expert - providing multiple services including website maintenance and interactive solutions","publisher":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/jacekjeznach.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#primaryimage","inLanguage":"en-US","url":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","contentUrl":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","width":1600,"height":900},{"@type":"WebPage","@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#webpage","url":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/","name":"Javascript Interview Questions & Answers (Part 1) | JavaScript | JJ","isPartOf":{"@id":"https:\/\/jacekjeznach.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#primaryimage"},"datePublished":"2021-11-28T12:11:59+00:00","dateModified":"2022-02-03T09:49:27+00:00","breadcrumb":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/jacekjeznach.com\/"},{"@type":"ListItem","position":2,"name":"Javascript Interview Questions &#038; Answers (Part 1)"}]},{"@type":"Article","@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#article","isPartOf":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#webpage"},"author":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"headline":"Javascript Interview Questions &#038; Answers (Part 1)","datePublished":"2021-11-28T12:11:59+00:00","dateModified":"2022-02-03T09:49:27+00:00","mainEntityOfPage":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#webpage"},"wordCount":2424,"publisher":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"image":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-and-answers-2021\/#primaryimage"},"thumbnailUrl":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","keywords":["javascript","personal"],"articleSection":["JavaScript"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e","name":"Jacek Jeznach","image":{"@type":"ImageObject","@id":"https:\/\/jacekjeznach.com\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g","caption":"Jacek Jeznach"},"logo":{"@id":"https:\/\/jacekjeznach.com\/#personlogo"},"url":"https:\/\/jacekjeznach.com\/author\/jeznacki1234\/"}]}},"_links":{"self":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2113"}],"collection":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/comments?post=2113"}],"version-history":[{"count":24,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2113\/revisions"}],"predecessor-version":[{"id":2682,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2113\/revisions\/2682"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/media\/2061"}],"wp:attachment":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/media?parent=2113"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/categories?post=2113"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/tags?post=2113"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}