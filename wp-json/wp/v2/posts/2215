{"id":2215,"date":"2021-11-25T09:53:20","date_gmt":"2021-11-25T09:53:20","guid":{"rendered":"https:\/\/jacekjeznach.com\/?p=2215"},"modified":"2022-02-01T12:20:45","modified_gmt":"2022-02-01T12:20:45","slug":"react-in-questions-and-answers-2021","status":"publish","type":"post","link":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/","title":{"rendered":"React JS Questions &#038; Answers (Part 2) 2021"},"content":{"rendered":"<h2>How to use event handlers with React component\u2019s?<\/h2>\n<p>Events handling in HTML and React is very similar.<\/p>\n<p>In <strong>HTML<\/strong>, the event name we usually declare in lowercase:<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;input type=&quot;text&quot; onchange='HandleChange' \/&gt;<\/pre>\n<p>In <strong>React <\/strong>we use similar syntax but we use a camelCase convention:<\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;input type=&quot;text&quot; onChange={HandleChange} \/&gt;<\/pre>\n<p>The main difference is that in HTML you can return <strong>false <\/strong>to prevent default behaviour but in react you must call <strong>preventDefault().<\/strong><\/p>\n<p><strong>HTML<\/strong><\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n&lt;input type=&quot;text&quot; onchange='console.log(&quot;change occured.&quot;); return false;' \/&gt;\r\n<\/pre>\n<p><strong>React<\/strong><\/p>\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n&lt;input type=&quot;text&quot; onChange={HandleChange} \/&gt;\r\n<\/pre>\n<p>&nbsp;<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nfunction handleClick(event) {\r\n  event.preventDefault()\r\n  console.log('The link was clicked.')\r\n}\r\n<\/pre>\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"9851625702\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\r\n\n<h2>How to bind methods or event handlers in JSX callbacks?<\/h2>\n<p><strong>Functional approach<\/strong><\/p>\n<p>Let&#8217;s define a function \u2013 which can be normal or arrow \u2013 for the change event of the input field. Now the function can be passed to the <strong>onChange <\/strong>attribute (JSX named attribute) of the input field.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nconst App = () =&gt; {\r\n  const handleChange = event =&gt; {\r\n    console.log(event);\r\n  };\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;My Hacker Stories&lt;\/h1&gt;\r\n      &lt;label htmlFor=&quot;search&quot;&gt;Search: &lt;\/label&gt;\r\n      &lt;input type=&quot;text&quot; onChange={handleChange} \/&gt;\r\n   &lt;\/div&gt;\r\n   );\r\n}\r\n<\/pre>\n<p><strong>Constructor approach<\/strong><\/p>\n<p>When you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nclass Foo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange= this.handleChange.bind(this);\r\n  }\r\n  handleChange() {\r\n    console.log('Click happened');\r\n  }\r\n  render() {\r\n    return &lt;input type=&quot;text&quot; onChange={this.handleChange} \/&gt;;\r\n  }\r\n}\r\n<\/pre>\n<p>In JavaScript, class methods are not bound by default. If you forget to bind <strong>this.handleChange<\/strong> and pass it to <strong>onClick<\/strong>, this will be undefined when the function is actually called.<\/p>\n<p>But there is a way you can get around this as you can use an <strong>arrow function<\/strong> in the callback:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nclass Foo extends React.Component{\r\n  handleChange() {\r\n    console.log('Click happened');\r\n  }\r\n  render() {\r\n    return &lt;input type=&quot;text&quot; onChange={() =&gt; this.handleChange()} \/&gt;;\r\n  }\r\n}\r\n<\/pre>\n<h2>What is a synthetic event in React?<\/h2>\n<p>Please look at the example below that we have taken from the previous question.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nconst App = () =&gt; {\r\n  const handleChange = event =&gt; {\r\n   console.log(event.target.value); \/\/event - is not real but a synthetic event \r\n  };\r\n  return ( ... );\r\n};\r\n\r\n<\/pre>\n<p>As you see the <strong>synthetic event<\/strong> looks similar to the <strong>browser\u2019s native<\/strong> event but in reality, it is essentially a <strong>cross-browser wrapper<\/strong> around the browser&#8217;s native event.<\/p>\n<p>It has more functions that are useful to prevent native browser behaviour (e.g. refreshing a page after the user clicks a form\u2019s submit button). React normalizes its events so that they have consistent properties across <strong>different browsers<\/strong>.<\/p>\n<h2>What is an inline conditional expression in React?<\/h2>\n<p>It&#8217;s a <strong>conditional rendering<\/strong> included directly in <strong>JSX <\/strong>syntax.<\/p>\n<p>With JavaScript\u2019s ternary operator, we can inline conditional state as a conditional rendering JSX:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n{isLoading ? (&lt;p&gt;Loading ...&lt;\/p&gt;) : (&lt;p&gt;Loaded&lt;\/p&gt;) }\r\n\r\n\/\/ OR SHORTHAND\r\n\r\n{isLoading  &amp;amp;&amp;amp;\r\n      &lt;h2&gt;\r\n          You have {messages.length} unread messages.\r\n      &lt;\/h2&gt;\r\n      :\r\n      &lt;h2&gt;\r\n          You don't have unread messages.\r\n      &lt;\/h2&gt;\r\n}\r\n<\/pre>\n<p>This feature can be quite powerful because it gives you the ability to conditionally render JSX. It\u2019s yet another tool in React to make your UI more dynamic.<\/p>\n<h2>What is Virtual DOM?<\/h2>\n<p>The<strong> Virtual DOM<\/strong> is a technique that React uses to optimize interacting with the browser. It is an <strong>in-memory representation<\/strong> of Real <strong>DOM<\/strong>. React keeps a copy of the DOM representation, for what concerns the React rendering: the<strong> Virtual DOM.<\/strong><\/p>\n<p><a href=\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/12\/vdom1-1.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-2238\" src=\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/12\/vdom1-1-700x318.png\" alt=\"\" width=\"700\" height=\"318\" srcset=\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/12\/vdom1-1-700x318.png 700w, https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/12\/vdom1-1-350x159.png 350w, https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/12\/vdom1-1-120x54.png 120w, https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/12\/vdom1-1.png 767w\" sizes=\"(max-width: 700px) 100vw, 700px\" \/><\/a><\/p>\n<p><strong>The DOM<\/strong> (Document Object Model) is a Tree representation of the page, starting from thetag, going down into every child, which are called nodes. The DOM has an API that you can use to traverse it, access every single node, filter them, modify them with JavaScript.<\/p>\n<p>Every time the DOM changes, the browser has to do two intensive operations: <strong>repaint <\/strong> and <strong>reflow<\/strong>.<\/p>\n<p>React uses a <strong>Virtual DOM<\/strong> to help the browser use less resources when changes need to be done on a page<\/p>\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"7226953054\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>What are the different phases of component lifecycle?<\/h2>\n<p>The component lifecycle has three distinct lifecycle phases:<\/p>\n<ul>\n<li><strong>Mounting<\/strong><\/li>\n<li><strong>Updating<\/strong><\/li>\n<li><strong>Unmounting<\/strong><\/li>\n<\/ul>\n<h4><span style=\"color: #05fdd8;\">Mounting<\/span><\/h4>\n<p><strong>constructor &#8211; &gt; render -&gt; componentDidUpdate<\/strong><\/p>\n<p>The process by which React<strong> creates a component and renders<\/strong> its content for the first time is called mounting, and there are three commonly used methods that components implement to participate in the mounting.<\/p>\n<p><strong>constructor<\/strong><br \/>\nReact create a <strong>new instance<\/strong> of a component, which gives the component an opportunity to receive the props, define its state data, and perform other preparatory work.<\/p>\n<p><strong>render<\/strong><br \/>\nThe component provides React with the content that <strong>will be added<\/strong> to the DOM.<\/p>\n<p><strong>componentDidMount<\/strong><br \/>\nIt\u00a0is\u00a0invoked\u00a0immediately\u00a0<strong>after\u00a0<\/strong>React<strong> inserts a component into the DOM<\/strong>. The updated DOM is now available for\u00a0access, which means that this method is the best place for initializing other\u00a0JavaScript libraries that need access to that DOM.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\r\nvar HelloMessage = React.createClass({ \r\n    componentDidMount: function() { \r\n        console.log('componentDidMount'); \r\n        \/\/opening an AJAX function here\r\n    }, \r\n    render: function() { \r\n        console.log('render'); \r\n        return &lt;h2&gt;{this.props.message}&lt;\/h2&gt;; \r\n    } \r\n});\r\n\r\n<\/pre>\n<h4><span style=\"color: #05fdd8;\">Updating<\/span><\/h4>\n<p><strong>render -&gt; componentDidUpdate<\/strong><\/p>\n<p>That phase invokes calling the <strong>render<\/strong> method to get content from the component and then calling the <strong>componentDidUpdate<\/strong> after the reconciliation process is complete.<\/p>\n<p>After the initial rendering that is performed during the <strong>mounting<\/strong> phase, any subsequent calls to the render method will be followed by a call to the componentDidUpdate method once React has completed the reconciliation process and updated the DOM.<\/p>\n<p><strong>componentDidUpdate<\/strong><br \/>\nThe method is called immediately after React updates the DOM. It gets these two arguments:<\/p>\n<ul>\n<li><strong>prevProps<\/strong>: The previous properties object<\/li>\n<li><strong>prevState<\/strong>: The previous state object<\/li>\n<\/ul>\n<p>The main use of the componentDidUpdate method is to directly manipulate the HTML elements in the<br \/>\nDOM.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\r\nvar HelloMessage = React.createClass({ \r\n    componentDidUpdate: function (prevProps, prevState) { \r\n        console.log(&quot;componentDidUpdate Message Component&quot;);\r\n    },\r\n    render: function() { \r\n        console.log('render'); \r\n        return &lt;h2&gt;{this.props.message}&lt;\/h2&gt;; \r\n    } \r\n});\r\n\r\n<\/pre>\n<p>After <strong>componentDidUpdate<\/strong>() is called, the updating cycle ends.<\/p>\n<h4><span style=\"color: #05fdd8;\">Unmounting<\/span><\/h4>\n<p>React\u00a0offers\u00a0only\u00a0one\u00a0method\u00a0for\u00a0this\u00a0phase,\u00a0which\u00a0is <strong>componentWillUnmount <\/strong>. When a component is about to be destroyed, React will call it.<\/p>\n<p><strong>componentWillUnmount <\/strong><br \/>\nThis method is useful for<strong> cleaning up any data<\/strong> that is created during the\u00a0component&#8217;s mounting or updating phases. It provides components with the opportunity to <strong>release resources, close network connections, <\/strong>and <strong>stop any asynchronous tasks.<\/strong><\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\r\nvar HelloMessage = React.createClass({ \r\n    componentWillUnmount: function () { \r\n        console.log(&quot;componentDidUpdate Message Component&quot;);\r\n       \/\/closing an AJAX connection here\r\n    },\r\n    render: function() { \r\n        console.log('render'); \r\n        return &lt;h2&gt;{this.props.message}&lt;\/h2&gt;; \r\n    } \r\n});\r\n\r\n<\/pre>\n","protected":false},"excerpt":{"rendered":"<p>How to use event handlers with React component\u2019s? Events handling in HTML and React is very similar. In HTML, the event name we usually declare in lowercase: In React we use similar syntax but we use a camelCase convention: The main difference is that in HTML you can return false to prevent default behaviour but [&hellip;]<\/p>\n","protected":false},"author":4,"featured_media":2061,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[61],"tags":[62,55],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>React JS Questions &amp; Answers (Part 2) 2021 | JavaScript | JJ<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"React JS Questions &amp; Answers (Part 2) 2021 | JavaScript | JJ\" \/>\n<meta property=\"og:description\" content=\"How to use event handlers with React component\u2019s? Events handling in HTML and React is very similar. In HTML, the event name we usually declare in lowercase: In React we use similar syntax but we use a camelCase convention: The main difference is that in HTML you can return false to prevent default behaviour but [&hellip;]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/\" \/>\n<meta property=\"og:site_name\" content=\"JJ\" \/>\n<meta property=\"article:published_time\" content=\"2021-11-25T09:53:20+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-01T12:20:45+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1600\" \/>\n\t<meta property=\"og:image:height\" content=\"900\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:creator\" content=\"@JeznachJacek\" \/>\n<meta name=\"twitter:site\" content=\"@JeznachJacek\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Jacek Jeznach\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/jacekjeznach.com\/#website\",\"url\":\"https:\/\/jacekjeznach.com\/\",\"name\":\"JJ\",\"description\":\"Hire Professional  WordPress Expert - providing multiple services including website maintenance and interactive solutions\",\"publisher\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/jacekjeznach.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"contentUrl\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"width\":1600,\"height\":900},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#webpage\",\"url\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/\",\"name\":\"React JS Questions & Answers (Part 2) 2021 | JavaScript | JJ\",\"isPartOf\":{\"@id\":\"https:\/\/jacekjeznach.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#primaryimage\"},\"datePublished\":\"2021-11-25T09:53:20+00:00\",\"dateModified\":\"2022-02-01T12:20:45+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/jacekjeznach.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"React JS Questions &#038; Answers (Part 2) 2021\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#webpage\"},\"author\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"headline\":\"React JS Questions &#038; Answers (Part 2) 2021\",\"datePublished\":\"2021-11-25T09:53:20+00:00\",\"dateModified\":\"2022-02-01T12:20:45+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#webpage\"},\"wordCount\":1138,\"publisher\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"image\":{\"@id\":\"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"keywords\":[\"javascript\",\"personal\"],\"articleSection\":[\"JavaScript\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\",\"name\":\"Jacek Jeznach\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/jacekjeznach.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g\",\"caption\":\"Jacek Jeznach\"},\"logo\":{\"@id\":\"https:\/\/jacekjeznach.com\/#personlogo\"},\"url\":\"https:\/\/jacekjeznach.com\/author\/jeznacki1234\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"React JS Questions & Answers (Part 2) 2021 | JavaScript | JJ","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/","og_locale":"en_US","og_type":"article","og_title":"React JS Questions & Answers (Part 2) 2021 | JavaScript | JJ","og_description":"How to use event handlers with React component\u2019s? Events handling in HTML and React is very similar. In HTML, the event name we usually declare in lowercase: In React we use similar syntax but we use a camelCase convention: The main difference is that in HTML you can return false to prevent default behaviour but [&hellip;]","og_url":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/","og_site_name":"JJ","article_published_time":"2021-11-25T09:53:20+00:00","article_modified_time":"2022-02-01T12:20:45+00:00","og_image":[{"width":1600,"height":900,"url":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","type":"image\/jpeg"}],"twitter_card":"summary","twitter_creator":"@JeznachJacek","twitter_site":"@JeznachJacek","twitter_misc":{"Written by":"Jacek Jeznach","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/jacekjeznach.com\/#website","url":"https:\/\/jacekjeznach.com\/","name":"JJ","description":"Hire Professional  WordPress Expert - providing multiple services including website maintenance and interactive solutions","publisher":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/jacekjeznach.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#primaryimage","inLanguage":"en-US","url":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","contentUrl":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","width":1600,"height":900},{"@type":"WebPage","@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#webpage","url":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/","name":"React JS Questions & Answers (Part 2) 2021 | JavaScript | JJ","isPartOf":{"@id":"https:\/\/jacekjeznach.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#primaryimage"},"datePublished":"2021-11-25T09:53:20+00:00","dateModified":"2022-02-01T12:20:45+00:00","breadcrumb":{"@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/jacekjeznach.com\/"},{"@type":"ListItem","position":2,"name":"React JS Questions &#038; Answers (Part 2) 2021"}]},{"@type":"Article","@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#article","isPartOf":{"@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#webpage"},"author":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"headline":"React JS Questions &#038; Answers (Part 2) 2021","datePublished":"2021-11-25T09:53:20+00:00","dateModified":"2022-02-01T12:20:45+00:00","mainEntityOfPage":{"@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#webpage"},"wordCount":1138,"publisher":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"image":{"@id":"https:\/\/jacekjeznach.com\/react-in-questions-and-answers-2021\/#primaryimage"},"thumbnailUrl":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","keywords":["javascript","personal"],"articleSection":["JavaScript"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e","name":"Jacek Jeznach","image":{"@type":"ImageObject","@id":"https:\/\/jacekjeznach.com\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g","caption":"Jacek Jeznach"},"logo":{"@id":"https:\/\/jacekjeznach.com\/#personlogo"},"url":"https:\/\/jacekjeznach.com\/author\/jeznacki1234\/"}]}},"_links":{"self":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2215"}],"collection":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/comments?post=2215"}],"version-history":[{"count":37,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2215\/revisions"}],"predecessor-version":[{"id":2631,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2215\/revisions\/2631"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/media\/2061"}],"wp:attachment":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/media?parent=2215"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/categories?post=2215"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/tags?post=2215"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}