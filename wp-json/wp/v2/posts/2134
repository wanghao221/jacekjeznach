{"id":2134,"date":"2021-11-01T12:33:58","date_gmt":"2021-11-01T12:33:58","guid":{"rendered":"https:\/\/jacekjeznach.com\/?p=2134"},"modified":"2022-02-03T09:50:16","modified_gmt":"2022-02-03T09:50:16","slug":"javascript-interview-questions-answers-part-2","status":"publish","type":"post","link":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/","title":{"rendered":"Javascript Interview Questions &#038; Answers (Part 2)"},"content":{"rendered":"<h2>What is a pure function?<\/h2>\n<p>A\u00a0<strong>Pure function<\/strong>\u00a0is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments &#8216;n&#8217; number of times and &#8216;n&#8217; number of places in the application then it will always return the same value. Let&#8217;s take an example to see the difference between pure and impure functions,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/Impure\r\nlet numberArray = [];\r\nconst impureAddNumber = number =&amp;amp;amp;gt; numberArray.push (number);\r\n\/\/Pure\r\nconst pureAddNumber = number =&amp;amp;amp;gt; argNumberArray =&amp;amp;amp;gt;\r\n  argNumberArray.concat ([number]);\r\n\r\n\/\/Display the results\r\nconsole.log (impureAddNumber (6)); \/\/ returns 6\r\nconsole.log (numberArray); \/\/ returns [6]\r\nconsole.log (pureAddNumber (7) (numberArray)); \/\/ returns [6, 7]\r\nconsole.log (numberArray); \/\/ returns [6]\r\n<\/pre>\n<p>As per above code snippets, Push function is impure itself by altering the array and returning an push number index which is independent of parameter value. Whereas Concat on the other hand takes the array and concatenates it with the other array producing a whole new array without side effects. Also, the return value is a concatenation of previous array. Remember that Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and makes harder to break your application by not having any side effects. These principles are coming together with\u00a0<strong>Immutability\u00a0<\/strong>concept of ES6 by giving preference to\u00a0const\u00a0over\u00a0let\u00a0usage.<\/p>\n<h2>What is the purpose of let keyword?<\/h2>\n<p>The let statement declares a\u00a0<strong>block scope local variable<\/strong>. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope. Let&#8217;s take an example to demonstrate the usage,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nlet counter = 30;\r\nif (counter === 30) {\r\n  let counter = 31;\r\n  console.log(counter); \/\/ 31\r\n}\r\nconsole.log(counter); \/\/ 30 (because if block variable won't exist here)\r\n<\/pre>\n<p><strong><ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"7226953054\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script><\/strong><\/p>\n<h2>What is the reason to choose the name let as keyword?<\/h2>\n<p>Let is a mathematical statement that was adopted by early programming languages like Scheme and Basic. It has been borrowed from dozens of other languages that use let already as a traditional keyword as close to var as possible.<\/p>\n<h2>How do you redeclare variables in switch block without an error?<\/h2>\n<p>If you try to redeclare variables in a\u00a0switch block\u00a0then it will cause errors because there is only one block. For example, the below code block throws a syntax error as below,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nlet counter = 1;\r\nswitch(x) {\r\n  case 0:\r\n    let name;\r\n    break;\r\n\r\n  case 1:\r\n    let name; \/\/ SyntaxError for redeclaration.\r\n    break;\r\n}\r\nTo avoid this error, you can create a nested block inside a case clause will create a new block scoped lexical environment.\r\nlet counter = 1;\r\n    switch(x) {\r\n      case 0: {\r\n        let name;\r\n        break;\r\n      }\r\n      case 1: {\r\n        let name; \/\/ No SyntaxError for redeclaration.\r\n        break;\r\n      }\r\n    }\r\n<\/pre>\n<h2>What is Temporal Dead Zone?<\/h2>\n<p>The Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, accessing a let or const variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable\u2019s binding and its declaration, is called the temporal dead zone. Let&#8217;s see this behavior with an example,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nfunction somemethod() {\r\n  console.log(counter1); \/\/ undefined\r\n  console.log(counter2); \/\/ ReferenceError\r\n  var counter1 = 1;\r\n  let counter2 = 2;\r\n}\r\n<\/pre>\n<h2>What is IIFE(Immediately Invoked Function Expression)?<\/h2>\n<p>IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">(function ()\r\n    {\r\n      \/\/ logic here\r\n    }\r\n )\r\n();\r\n<\/pre>\n<p>The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">(function ()\r\n    {\r\n      var message = &amp;amp;amp;quot;IIFE&amp;amp;amp;quot;;\r\n      console.log(message);\r\n    }\r\n )\r\n();\r\nconsole.log(message); \/\/Error: message is not defined\r\n<\/pre>\n<h2>What is the benefit of using modules?<\/h2>\n<p>There are a lot of benefits to using modules in favour of a sprawling. Some of the benefits are,<br \/>\nMaintainablity<br \/>\nReusability<br \/>\nNamespacing<\/p>\n<p><strong><ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-7829400583245190\"\r\n     data-ad-slot=\"9851625702\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\r\n<\/strong><\/p>\n<h2>What is memoization?<\/h2>\n<p>Memoization is a programming technique which attempts to increase a function\u2019s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache. Let&#8217;s take an example of adding function with memorization,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nconst memoizAddition = () =&amp;amp;gt; {\r\n  let cache = {};\r\n return (value) =&amp;amp;gt; {\r\n  if (value in cache) {\r\n   console.log('Fetching from cache');\r\n   return cache[value]; \/\/ Here, cache.value cannot be used as property name starts with the number which is not valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.\r\n  }\r\n  else {\r\n   console.log('Calculating result');\r\n   let result = value + 20;\r\n   cache[value] = result;\r\n   return result;\r\n  }\r\n }\r\n}\r\n\/\/ returned function from memoizAddition\r\nconst addition = memoizAddition();\r\nconsole.log(addition(20)); \/\/output: 40 calculated\r\nconsole.log(addition(20)); \/\/output: 40 cached\r\n<\/pre>\n<h2>What are the main rules of promise?<\/h2>\n<p>A promise must follow a specific set of rules,<\/p>\n<ul>\n<li>A promise is an object that supplies a standard-compliant .then() method<\/li>\n<li>A pending promise may transition into either fulfilled or rejected state<\/li>\n<li>A fulfilled or rejected promise is settled and it must not transition into any other state.<\/li>\n<li>Once a promise is settled, the value must not change.<\/li>\n<\/ul>\n<h2>What is callback in callback?<\/h2>\n<p>You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nloadScript('\/script1.js', function(script) {\r\n   console.log('first script is loaded');\r\n\r\n  loadScript('\/script2.js', function(script) {\r\n\r\n    console.log('second script is loaded');\r\n\r\n    loadScript('\/script3.js', function(script) {\r\n\r\n        console.log('third script is loaded');\r\n      \/\/ after all scripts are loaded\r\n    });\r\n\r\n  })\r\n\r\n});\r\n<\/pre>\n<h2>What is Hoisting?<\/h2>\n<p>Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation. Let&#8217;s take a simple example of variable hoisting,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nconsole.log(message); \/\/output : undefined\r\nvar message = \u2019The variable Has been hoisted\u2019;\r\n<\/pre>\n<p>The above code looks like as below to the interpreter,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar message;\r\nconsole.log(message);\r\nmessage = \u2019The variable Has been hoisted\u2019;<\/pre>\n<h2>What are classes in ES6?<\/h2>\n<p>In ES6, Javascript classes are primarily syntactical sugar over JavaScript\u2019s existing prototype-based inheritance. For example, the prototype based inheritance written in function expression as below,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nfunction Bike(model,color) {\r\n    this.model = model;\r\n    this.color = color;\r\n}\r\n\r\nBike.prototype.getDetails = function() {\r\n    return this.model+ ' bike has' + this.color+ ' color';\r\n};<\/pre>\n<p>Whereas ES6 classes can be defined as an alternative<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nclass Bike{\r\n  constructor(color, model) {\r\n    this.color= color;\r\n    this.model= model;\r\n  }\r\n}<\/pre>\n<h2>What are closures?<\/h2>\n<p>A closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function\u2019s variables. The closure has three scope chains<\/p>\n<ul>\n<li>Own scope where variables defined between its curly brackets<\/li>\n<li>Outer function\u2019s variables<\/li>\n<li>Global variables Let&#8217;s take an example of closure concept,<\/li>\n<\/ul>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nfunction Welcome(name){\r\n  var greetingInfo = function(message){\r\n   console.log(message+' '+name);\r\n  }\r\nreturn greetingInfo;\r\n}\r\nvar myFunction = Welcome('John');\r\nmyFunction('Welcome '); \/\/Output: Welcome John\r\nmyFunction('Hello Mr.'); \/\/output: Hello Mr.John\r\n<\/pre>\n<p>As per the above code, the inner function(greetingInfo) has access to the variables in the outer function scope(Welcome) even after outer function has returned.<\/p>\n<h2>What are modules?<\/h2>\n<p>Modules refers small units of independent, reusable code and also act as foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor<\/p>\n<h2>What is scope in javascript?<\/h2>\n<p>Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.<\/p>\n<h2>What is a service worker?<\/h2>\n<p>A Service worker is basically a script (JavaScript file) that runs in background, separate from a web page and provide features that don&#8217;t need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.<\/p>\n<h2>How do you manipulate DOM using service worker?<\/h2>\n<p>Service worker can&#8217;t access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the\u00a0postMessage\u00a0interface, and those pages can manipulate the DOM.<\/p>\n<h2>How do you reuse information across service worker restarts?<\/h2>\n<p>The problem with service worker is that it get terminated when not in use, and restarted when it&#8217;s next needed, so you cannot rely on global state within a service worker&#8217;s\u00a0onfetch\u00a0and\u00a0onmessage\u00a0handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.<\/p>\n<h2>What is IndexedDB?<\/h2>\n<p><strong>IndexedDB<\/strong> is a low-level API for client-side storage of larger amounts of structured data, including files\/blobs. This API uses indexes to enable high-performance searches of this data.<\/p>\n<h2>What is web storage?<\/h2>\n<p>Web storage is an API that provides a mechanism by which browsers can store key\/value pairs locally within the user&#8217;s browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.<\/p>\n<p><strong>Local storage<\/strong>:\u00a0It stores data for current origin with no expiration date.<br \/>\n<strong>Session storage<\/strong>:\u00a0It stores data for one session and the data is lost when the browser tab is closed.<\/p>\n<h2>What is a post message?<\/h2>\n<p>Post message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).<\/p>\n<h2>What is promise chaining?<\/h2>\n<p>The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let&#8217;s take an example of promise chaining for calculating the final result,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\r\nnew Promise(function(resolve, reject) {\r\n\r\n  setTimeout(() =&amp;gt; resolve(1), 1000);\r\n\r\n}).then(function(result) {\r\n\r\n  console.log(result); \/\/ 1\r\n  return result * 2;\r\n\r\n}).then(function(result) {\r\n\r\n  console.log(result); \/\/ 2\r\n  return result * 3;\r\n\r\n}).then(function(result) {\r\n\r\n  console.log(result); \/\/ 6\r\n  return result * 4;\r\n\r\n});\r\n<\/pre>\n<p>In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,<\/p>\n<ul>\n<li>The initial promise resolves in 1 second,<\/li>\n<li>After that .then handler is called by logging the result(1) and then return a promise with the value of result *<\/li>\n<li>After that the value passed to the next .then handler by logging the result(2) and return a promise with result *<\/li>\n<li>Finally the value passed to the last .then handler by logging the result(6) and return a promise with result *<\/li>\n<\/ul>\n<h2>What is promise.all?<\/h2>\n<p>Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nPromise.all([Promise1, Promise2, Promise3]).then(result) =&amp;gt; { \r\n  console.log(result) \r\n}).catch(error =&amp;gt; console.log(`Error in promises ${error}`))\r\n<\/pre>\n<p><strong>Note:<\/strong>\u00a0Remember that the order of the promises(output the result) is maintained as per input order.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>What is a pure function? A\u00a0Pure function\u00a0is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments &#8216;n&#8217; number of times and &#8216;n&#8217; number of places in the application then it will always return the same value. Let&#8217;s take [&hellip;]<\/p>\n","protected":false},"author":4,"featured_media":2061,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[61],"tags":[62,55],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v18.0 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Javascript Interview Questions &amp; Answers (Part 2) | JavaScript | JJ<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Javascript Interview Questions &amp; Answers (Part 2) | JavaScript | JJ\" \/>\n<meta property=\"og:description\" content=\"What is a pure function? A\u00a0Pure function\u00a0is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments &#8216;n&#8217; number of times and &#8216;n&#8217; number of places in the application then it will always return the same value. Let&#8217;s take [&hellip;]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/\" \/>\n<meta property=\"og:site_name\" content=\"JJ\" \/>\n<meta property=\"article:published_time\" content=\"2021-11-01T12:33:58+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-03T09:50:16+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1600\" \/>\n\t<meta property=\"og:image:height\" content=\"900\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:creator\" content=\"@JeznachJacek\" \/>\n<meta name=\"twitter:site\" content=\"@JeznachJacek\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Jacek Jeznach\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/jacekjeznach.com\/#website\",\"url\":\"https:\/\/jacekjeznach.com\/\",\"name\":\"JJ\",\"description\":\"Hire Professional  WordPress Expert - providing multiple services including website maintenance and interactive solutions\",\"publisher\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/jacekjeznach.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"contentUrl\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"width\":1600,\"height\":900},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#webpage\",\"url\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/\",\"name\":\"Javascript Interview Questions & Answers (Part 2) | JavaScript | JJ\",\"isPartOf\":{\"@id\":\"https:\/\/jacekjeznach.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#primaryimage\"},\"datePublished\":\"2021-11-01T12:33:58+00:00\",\"dateModified\":\"2022-02-03T09:50:16+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/jacekjeznach.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Javascript Interview Questions &#038; Answers (Part 2)\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#webpage\"},\"author\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"headline\":\"Javascript Interview Questions &#038; Answers (Part 2)\",\"datePublished\":\"2021-11-01T12:33:58+00:00\",\"dateModified\":\"2022-02-03T09:50:16+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#webpage\"},\"wordCount\":1957,\"publisher\":{\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\"},\"image\":{\"@id\":\"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg\",\"keywords\":[\"javascript\",\"personal\"],\"articleSection\":[\"JavaScript\"],\"inLanguage\":\"en-US\"},{\"@type\":[\"Person\",\"Organization\"],\"@id\":\"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e\",\"name\":\"Jacek Jeznach\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/jacekjeznach.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g\",\"caption\":\"Jacek Jeznach\"},\"logo\":{\"@id\":\"https:\/\/jacekjeznach.com\/#personlogo\"},\"url\":\"https:\/\/jacekjeznach.com\/author\/jeznacki1234\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Javascript Interview Questions & Answers (Part 2) | JavaScript | JJ","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/","og_locale":"en_US","og_type":"article","og_title":"Javascript Interview Questions & Answers (Part 2) | JavaScript | JJ","og_description":"What is a pure function? A\u00a0Pure function\u00a0is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments &#8216;n&#8217; number of times and &#8216;n&#8217; number of places in the application then it will always return the same value. Let&#8217;s take [&hellip;]","og_url":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/","og_site_name":"JJ","article_published_time":"2021-11-01T12:33:58+00:00","article_modified_time":"2022-02-03T09:50:16+00:00","og_image":[{"width":1600,"height":900,"url":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","type":"image\/jpeg"}],"twitter_card":"summary","twitter_creator":"@JeznachJacek","twitter_site":"@JeznachJacek","twitter_misc":{"Written by":"Jacek Jeznach","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebSite","@id":"https:\/\/jacekjeznach.com\/#website","url":"https:\/\/jacekjeznach.com\/","name":"JJ","description":"Hire Professional  WordPress Expert - providing multiple services including website maintenance and interactive solutions","publisher":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/jacekjeznach.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#primaryimage","inLanguage":"en-US","url":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","contentUrl":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","width":1600,"height":900},{"@type":"WebPage","@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#webpage","url":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/","name":"Javascript Interview Questions & Answers (Part 2) | JavaScript | JJ","isPartOf":{"@id":"https:\/\/jacekjeznach.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#primaryimage"},"datePublished":"2021-11-01T12:33:58+00:00","dateModified":"2022-02-03T09:50:16+00:00","breadcrumb":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/jacekjeznach.com\/"},{"@type":"ListItem","position":2,"name":"Javascript Interview Questions &#038; Answers (Part 2)"}]},{"@type":"Article","@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#article","isPartOf":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#webpage"},"author":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"headline":"Javascript Interview Questions &#038; Answers (Part 2)","datePublished":"2021-11-01T12:33:58+00:00","dateModified":"2022-02-03T09:50:16+00:00","mainEntityOfPage":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#webpage"},"wordCount":1957,"publisher":{"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e"},"image":{"@id":"https:\/\/jacekjeznach.com\/javascript-interview-questions-answers-part-2\/#primaryimage"},"thumbnailUrl":"https:\/\/jacekjeznach.com\/wp-content\/uploads\/2021\/11\/JavaScript_Featured-1.jpg","keywords":["javascript","personal"],"articleSection":["JavaScript"],"inLanguage":"en-US"},{"@type":["Person","Organization"],"@id":"https:\/\/jacekjeznach.com\/#\/schema\/person\/5adfd5bffa0fa377e81b67da26f9730e","name":"Jacek Jeznach","image":{"@type":"ImageObject","@id":"https:\/\/jacekjeznach.com\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/dc947f87f7bb9ca215513aa49e41203f?s=96&d=mm&r=g","caption":"Jacek Jeznach"},"logo":{"@id":"https:\/\/jacekjeznach.com\/#personlogo"},"url":"https:\/\/jacekjeznach.com\/author\/jeznacki1234\/"}]}},"_links":{"self":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2134"}],"collection":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/comments?post=2134"}],"version-history":[{"count":9,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2134\/revisions"}],"predecessor-version":[{"id":2683,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/posts\/2134\/revisions\/2683"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/media\/2061"}],"wp:attachment":[{"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/media?parent=2134"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/categories?post=2134"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/jacekjeznach.com\/wp-json\/wp\/v2\/tags?post=2134"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}